{
	"info": {
		"_postman_id": "209c9218-a81f-4572-80c3-9cc6d80e6cd3",
		"name": "Torino_Ailyn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24313612"
	},
	"item": [
		{
			"name": "ProcessPocEmbarkPassenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"jsonData\", jsonData);\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codePocEmbark.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messagePocEmbark.toString());\r",
							"});\r",
							"\r",
							"const unixTimestamp = new Date((pm.environment.get(\"pocDateTime\")) * 1000); //multiply 1000 converts Unix  to JavaScript \r",
							"const getHours = String(unixTimestamp.getHours()).padStart(2, '0');\r",
							"const getMin = String(unixTimestamp.getMinutes()).padStart(2, '0');\r",
							"const getSec = String(unixTimestamp.getSeconds()).padStart(2, '0');\r",
							"const getday = String(unixTimestamp.getDate()).padStart(2, '0');\r",
							"const getMonth = String(unixTimestamp.getMonth() + 1).padStart(2, '0');\r",
							"\r",
							"// console.log(\"--------------------------------------------------------\");\r",
							"\r",
							"// console.log(\"pocDateTime\", pm.environment.get(\"pocDateTime\"));\r",
							"// console.log(\"stda\", pm.environment.get(\"stda\"));\r",
							"\r",
							"/**I save the resulting values in the environment for later use in the CheckDocument service*/\r",
							"if (!data.validCode2D) {\r",
							"    code2D = pm.environment.get(\"code2Dcode2D\");\r",
							"    // console.log(\"code2Dcode2D DÍA ACTUAL: \", code2D);\r",
							"\r",
							"    const name = code2D.split('/')[1].split(' ')[0];\r",
							"    pm.environment.set(\"name\", name);\r",
							"    // console.log(\"name\", pm.environment.get(\"name\"));\r",
							"\r",
							"    const lastName = code2D.split('1')[1].split('/')[0];\r",
							"    pm.environment.set(\"lastName\", lastName);\r",
							"    // console.log(\"lastName\", pm.environment.get(\"lastName\"));\r",
							"\r",
							"    const seatNumber = code2D.split('8741')[1].split('A')[0].split(' ')[3];\r",
							"    pm.environment.set(\"seatNumber\", seatNumber);\r",
							"    //console.log(\"seatNumber\", seatNumber);\r",
							"\r",
							"    const seatLetter = code2D.split('8741')[1].split(`${seatNumber}`)[1].split(' ')[0];\r",
							"    pm.environment.set(\"seatLetter\", seatLetter);\r",
							"    // console.log(\"seatLetter\", seatLetter);\r",
							"\r",
							"    const seatCode = code2D.split('8741')[1].split(' ')[3];\r",
							"    pm.environment.set(\"seatCode\", seatCode);\r",
							"    //console.log(\"seatCode\", pm.environment.get(\"seatCode\"));\r",
							"\r",
							"    const airlineIataCode = code2D.split('MVDPTY')[1].split(' ')[0];\r",
							"    pm.environment.set(\"airlineIataCode\", airlineIataCode);\r",
							"    // console.log(\"airlineIataCode\", pm.environment.get(\"airlineIataCode\"));\r",
							"\r",
							"    const splitFlightCode = code2D.split('MVDPTY')[1].split(' ');\r",
							"    flightCode1 = splitFlightCode[0];\r",
							"    flightCode2 = splitFlightCode[1];\r",
							"    flightCode = flightCode1 + \" \" + flightCode2;\r",
							"    pm.environment.set(\"flightCode\", flightCode);\r",
							"    // console.log(\"flightCode\", pm.environment.get(\"flightCode\"));\r",
							"\r",
							"    const flightNumber = code2D.split('MVDPTY')[1].split(' ')[1];\r",
							"    pm.environment.set(\"flightNumber\", flightNumber);\r",
							"    //console.log(\"flightNumber\", pm.environment.get(\"flightNumber\"));\r",
							"\r",
							"    const date = (getday + \"/\" + getMonth + \"/\" + unixTimestamp.getFullYear() + \" \" + getHours + \":\" + getMin + \":\" + getSec);\r",
							"    pm.environment.set(\"date\", date);\r",
							"    // console.log(\"date\", pm.environment.get(\"date\"));\r",
							"\r",
							"    const stdaJul = code2D.split('8741 ')[1].split(' ')[0];\r",
							"    pm.environment.set(\"stdaJul\", stdaJul);\r",
							"    console.log(\"stdaJul\", stdaJul);\r",
							"}\r",
							"if (data.codePocEmbark == 0) {\r",
							"\r",
							"    /**Verifying that the data sent in the body of the request are the same as those returned in the body of the response.*/\r",
							"    pm.test(\"validate that the response message is the one I am expecting in the js for the current iteration\", () => {\r",
							"\r",
							"        /**If the passenger is inserted verify the data in insertBcbp*/\r",
							"        if (jsonData.data.insertBcbp.id != 0) {\r",
							"            pass = jsonData.data.insertBcbp;\r",
							"        } else if (jsonData.data.updateBcbp.id != 0) {\r",
							"            pass = jsonData.data.updateBcbp;\r",
							"        } else {\r",
							"            pass = jsonData.data.existAndNotUpdateBcbp;\r",
							"        }\r",
							"        pm.environment.set(\"idBCBP\", pass.id);\r",
							"        pm.environment.set(\"runwayId\", data.runwayId);\r",
							"        pm.environment.set(\"bcbpLastUpdate\", pass.bcbpLastUpdate);\r",
							"        pm.environment.set(\"vipCode\", pass.vipCode);\r",
							"        pm.environment.set(\"expirationBCBP\", pass.expiration);\r",
							"\r",
							"        pm.expect(pass.name).to.eq(pm.environment.get(\"name\"));\r",
							"        pm.expect(pass.lastname.toUpperCase()).to.eq((pm.environment.get(\"lastName\")).toUpperCase());\r",
							"        pm.expect(pass.seatLetter).to.eq(pm.environment.get(\"seatLetter\"));\r",
							"        pm.expect(pass.seatNumber).to.eq(pm.environment.get(\"seatNumber\"));\r",
							"        pm.expect(pass.airlineIataCode).to.eq(pm.environment.get(\"airlineIataCode\"));\r",
							"        pm.expect(pass.flightNumber).to.eq(pm.environment.get(\"flightNumber\"));\r",
							"        pm.expect(pass.date).to.eq(pm.environment.get(\"date\"));\r",
							"        pm.expect(pass.stdaJul.toString()).to.eq(stdaJul.toString());\r",
							"        pm.expect(pass.stda.toString()).to.eq(data.stda.toString());\r",
							"        pm.expect(pass.code2D).to.eq(pm.environment.get(\"code2D\"));\r",
							"        pm.expect(pass.pocDateTime.toString()).to.eq(data.pocDateTime.toString());\r",
							"        pm.expect(pass.runwayId).to.eq(data.runwayId.toLowerCase());\r",
							"    })\r",
							"}\r",
							"(data.userName == null || data.userName == \"\" || data.codePocEmbark.toString() == \"0\" || (data.validateAirportISOName && data.validateTerminalNames)) ?\r",
							"    postman.setNextRequest(\"ProcessDocumentEmbarkPassenger\") : postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"data.index: \", data.index);\r",
							"\r",
							"const today = Math.floor(new Date().getTime() / 1000.0);\r",
							"\r",
							"if (!!data.validPocDateTime) {\r",
							"    pm.environment.set(\"pocDateTime\", data.pocDateTime);\r",
							"} else {\r",
							"    /**I keep the time when the passenger passed through poc*/\r",
							"    pm.environment.set(\"pocDateTime\", today);\r",
							"}\r",
							"\r",
							"if (!!data.validStda) {\r",
							"    pm.environment.set(\"stda\", data.stda);\r",
							"} else {\r",
							"    /**I specify the flight for 5:00 p.m. on the current day*/\r",
							"    const now = new Date();\r",
							"    const stda = Math.floor(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 17, 0, 0, 0) / 1000.0);\r",
							"    pm.environment.set(\"stda\", stda);\r",
							"}\r",
							"if (!!data.validCode2D) {\r",
							"    code2D = data.code2D;\r",
							"} else {\r",
							"    /**Gets the Julian day of the current year*/\r",
							"    const now = Date.now();\r",
							"    const startOfYear = new Date(new Date().getFullYear(), 0, 1);\r",
							"    const julianDay = Math.ceil((now - startOfYear) / 86400000);\r",
							"\r",
							"    /**Change the stdaJul in the code2D of the json*/\r",
							"    splitcode2D = data.code2D.split(' 1   ');\r",
							"    //console.log(\"splitcode2D\", splitcode2D);\r",
							"\r",
							"    code2D1 = splitcode2D[0];\r",
							"    code2D2 = splitcode2D[1];\r",
							"    code2D = code2D1 + \" \" + julianDay.toString().padEnd(3, \" \") + \" \" + code2D2;\r",
							"}\r",
							"pm.environment.set(\"code2Dcode2D\", code2D);\r",
							"console.log(\"code2Dcode2D DÍA ACTUAL: \", pm.environment.get(\"code2Dcode2D\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"pocBcbp\": {\r\n        \"stda\": {{stda}},\r\n        \"code2D\": \"{{code2Dcode2D}}\",\r\n        \"pocDateTime\": {{pocDateTime}},\r\n        \"runwayId\": \"{{runwayId}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessPocEmbarkPassenger?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessPocEmbarkPassenger"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "ProcessPocEmbarkPassenger",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pocBcbp\": {\r\n    \"name\": \"DIANA I\",\r\n    \"lastname\": \"DOMINGUEZ MA\",\r\n    \"seatLetter\": \"S\",\r\n    \"seatNumber\": \"301\",\r\n    \"airlineIataCode\": \"AF\",\r\n    \"flightNumber\": \"8741\",\r\n    \"date\": \"1657737131\",\r\n    \"stdaJul\": 194,\r\n    \"stda\": 1657735800,\r\n    \"code2D\": \"M1LOPEZ BARRAG/VALERIA        MVDGRUAF 8741 194 307S        \",\r\n    \"pocDateTime\": 1657737128,\r\n    \"runwayId\": \"POC_1\",\r\n    \"bcbpLastUpdate\": 1657737128\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessPocEmbarkPassenger?userName=QA",
							"host": [
								"{{torino.url}}"
							],
							"path": [
								"api",
								"MatchAndSimilarNames",
								"ProcessPocEmbarkPassenger"
							],
							"query": [
								{
									"key": "userName",
									"value": "QA"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "GUID",
							"value": "8ea39ddf-a744-47b8-a7a6-844e67d8d900"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ARR/3.0"
						},
						{
							"key": "Date",
							"value": "Wed, 08 Feb 2023 13:31:40 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1078"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"insertBcbp\": {\n            \"id\": 0,\n            \"name\": null,\n            \"lastname\": null,\n            \"seatLetter\": null,\n            \"seatNumber\": null,\n            \"airlineIataCode\": null,\n            \"flightNumber\": null,\n            \"date\": null,\n            \"stdaJul\": 0,\n            \"stda\": 0,\n            \"code2D\": null,\n            \"pocDateTime\": 0,\n            \"runwayId\": null,\n            \"bcbpLastUpdate\": 0,\n            \"vipCode\": null,\n            \"deleted\": false,\n            \"expiration\": 0\n        },\n        \"updateBcbp\": {\n            \"id\": 30379,\n            \"name\": \"VALERIA\",\n            \"lastname\": \"LOPEZ BARRAG\",\n            \"seatLetter\": \"S\",\n            \"seatNumber\": \"307\",\n            \"airlineIataCode\": \"AF\",\n            \"flightNumber\": \"8741\",\n            \"date\": \"13/07/2022 15:10:00\",\n            \"stdaJul\": 194,\n            \"stda\": 1657735800,\n            \"code2D\": \"M1LOPEZ BARRAG/VALERIA        MVDGRUAF 8741 194 307S        \",\n            \"pocDateTime\": 1657737128,\n            \"runwayId\": \"POC_1\",\n            \"bcbpLastUpdate\": 1657737128,\n            \"vipCode\": null,\n            \"deleted\": false,\n            \"expiration\": 1675905697\n        },\n        \"existAndNotUpdateBcbp\": {\n            \"id\": 0,\n            \"name\": null,\n            \"lastname\": null,\n            \"seatLetter\": null,\n            \"seatNumber\": null,\n            \"airlineIataCode\": null,\n            \"flightNumber\": null,\n            \"date\": null,\n            \"stdaJul\": 0,\n            \"stda\": 0,\n            \"code2D\": null,\n            \"pocDateTime\": 0,\n            \"runwayId\": null,\n            \"bcbpLastUpdate\": 0,\n            \"vipCode\": null,\n            \"deleted\": false,\n            \"expiration\": 0\n        }\n    },\n    \"guid\": \"8ea39ddf-a744-47b8-a7a6-844e67d8d900\",\n    \"code\": 0,\n    \"message\": \"Transacción ejecutada con éxito\"\n}"
				}
			]
		},
		{
			"name": "ProcessDocumentEmbarkPassenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"----------------------------------------------------\")\r",
							"console.log(\"dnmDateTime\", pm.environment.get(\"dnmDateTime\"));\r",
							"console.log(\"code2D\", pm.environment.get(\"code2Dcode2D\"));\r",
							"console.log(\"ProcessDocumentEmbarkPassenger \", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeDocumentEmbark.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageDocumentEmbark.toString());\r",
							"});\r",
							"\r",
							"if (data.codeDocumentEmbark.toString() == \"0\" && jsonData.code == 0) {\r",
							"\r",
							"    /**Verifying that the data sent in the body of the request are the same as those returned in the body of the response*/\r",
							"    pm.test(\"Checks if what is sent in the body of the request is what is returned as a response\", () => {\r",
							"\r",
							"        if (jsonData.data.insertDocument.id != 0) {\r",
							"            doc = jsonData.data.insertDocument;\r",
							"            pm.expect(doc.dnmDateTime).to.eq(pm.environment.get(\"dnmDateTime\"));\r",
							"        } else if (jsonData.data.updateDocument.id != 0) {\r",
							"            doc = jsonData.data.updateDocument;\r",
							"            pm.expect(doc.dnmDateTime).to.eq(pm.environment.get(\"dnmDateTime\"));\r",
							"        } else {\r",
							"            doc = jsonData.data.existAndNotUpdateDocument;\r",
							"        }\r",
							"        /**I save the value of dnmLastUpdate, expiration, personalNumber and id to doc it to the GetByDNMDocument service*/\r",
							"        pm.environment.set(\"dnmLastUpdate\", doc.dnmLastUpdate);\r",
							"        pm.environment.set(\"expirationDocument\", doc.expiration);\r",
							"        pm.environment.set(\"idDocument\", doc.id);\r",
							"        pm.environment.set(\"personalNumber\", doc.personalNumber);\r",
							"        pm.environment.set(\"runwayId_dnm\", doc.runwayId);\r",
							"        pm.environment.set(\"idPhotosDNMList\", doc.photosDNMList[0].id);\r",
							"        pm.environment.set(\"documentId\", doc.photosDNMList[0].documentId);\r",
							"        pm.environment.set(\"photoTypeId\", doc.photosDNMList[0].photoTypeId);\r",
							"        pm.environment.set(\"dnmType\", doc.photosDNMList[0].photoType.dnmType);\r",
							"        pm.environment.set(\"dnmSource\", doc.photosDNMList[0].photoType.dnmSource);\r",
							"        pm.environment.set(\"webType\", doc.photosDNMList[0].photoType.webType);\r",
							"\r",
							"        pm.expect(doc.moveId).to.eq(pm.environment.get(\"moveId\"));\r",
							"        pm.expect(doc.airlineIataCode).to.eq(pm.environment.get(\"airlineIataCode\"));\r",
							"        pm.expect(doc.flightNumber).to.eq(pm.environment.get(\"flightNumber\"));\r",
							"        pm.expect(doc.moveType).to.eq(\"D\");\r",
							"        pm.expect(doc.name).to.eq(pm.environment.get(\"name\"));\r",
							"        pm.expect(doc.lastname.toUpperCase()).to.eq(pm.environment.get(\"lastName\").toUpperCase());\r",
							"        pm.expect(doc.dateOfBirth).to.eq(\"11/02/1996\");\r",
							"        pm.expect(doc.docNumber).to.eq(pm.environment.get(\"docNumber\"));\r",
							"        pm.expect(doc.docType).to.eq(\"P\");\r",
							"        /*pm.expect(doc.countryISOAlpha3).to.eq(pm.environment.get(\"countryISOAlpha3\"));\r",
							"        pm.expect(doc.nationalityISOAlpha3).to.eq(pm.environment.get(\"nationalityISOAlpha3\"));*/\r",
							"        pm.expect(doc.paxType).to.eq(\"P\");\r",
							"        pm.expect(doc.gender).to.eq(pm.environment.get(\"gender\"));\r",
							"    })\r",
							"}\r",
							"\r",
							"(data.userName == null || data.userName == \"\" || data.codeDocumentEmbark.toString() == \"0\" || (!!data.validateAirportISOName && !!data.validateTerminalNames)) ? postman.setNextRequest(\"ProcessSyncEmbarkPassenger\") : postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/**I get the time in milliseconds that the passenger passes through dnm*/\r",
							"const dnmDateTime = Math.floor(new Date().getTime() / 1000.0);\r",
							"pm.environment.set(\"dnmDateTime\", dnmDateTime);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"data\": {\r\n        \"moveId\": \"{{moveId}}\",\r\n        \"dnmDateTime\": {{dnmDateTime}},\r\n        \"moveType\": \"D\",\r\n        \"name\": \"{{name}}\",\r\n        \"code2D\": \"{{code2Dcode2D}}\",\r\n        \"lastname\": \"{{lastName}}\",\r\n        \"dateOfBirth\": \"11/02/1996\",\r\n        \"docNumber\": \"{{docNumber}}\",\r\n        \"photosDnms\": [\r\n            {\r\n                \"image\": \"{{Imagen}}\",\r\n                \"extension\": \"JPG\",\r\n                \"type\": \"CHIP\",\r\n                \"source\": \"DOCUMENT\",\r\n                \"side\": \"FRONT\"\r\n            }\r\n        ],\r\n        \"docType\": \"P\",\r\n        \"countryISOAlpha3\": \"{{countryISOAlpha3}}\",\r\n        \"paxType\": \"P\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"nationalityISOAlpha3\": \"{{nationalityISOAlpha3}}\",\r\n        \"docExpirationDate\": \"0\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessDocumentEmbarkPassenger?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessDocumentEmbarkPassenger"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ProcessSyncEmbarkPassenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"ProcessSyncEmbarkPassenger\", jsonData);\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeSyncEmbark.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageSyncEmbark.toString());\r",
							"});\r",
							"(data.userName == null || data.userName == \"\" || data.codeSyncEmbark.toString() == \"0\" || (!!data.validateAirportISOName && !!data.validateTerminalNames)) ? postman.setNextRequest(\"MatchDocumentBcbp\") : postman.setNextRequest(null)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!!data.validateAirportISOName && !!data.validateTerminalNames) {\r",
							"    pm.environment.set(\"airportISOName\", data.airportISOName);\r",
							"    pm.environment.set(\"terminalNames\", data.terminalNames);\r",
							"} else {\r",
							"    pm.environment.set(\"airportISOName\", \"\");\r",
							"    pm.environment.set(\"terminalNames\", \"\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessSyncEmbarkPassenger?userName=QA",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessSyncEmbarkPassenger"
					],
					"query": [
						{
							"key": "userName",
							"value": "QA"
						},
						{
							"key": "airportISOName",
							"value": "{{airportISOName}}",
							"disabled": true
						},
						{
							"key": "terminalNames",
							"value": "{{terminalNames}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MatchDocumentBcbp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"MatchDocumentBcbp\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeMatchDocumentBcbp.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageMatchDocumentBcbp.toString());\r",
							"});\r",
							"\r",
							"if (jsonData.code == 0) {\r",
							"    pm.environment.set(\"paxMatchId\", jsonData.data.paxMatch.id);\r",
							"    pm.environment.set(\"bb\", JSON.stringify(jsonData.data));\r",
							"\r",
							"    /**check the status*/\r",
							"    pm.test(\"check the status ReadyToAdd\", () => {\r",
							"        pm.expect(jsonData.data.paxMatch.submissionToGalleryType).to.eq(\"ReadyToAdd\");\r",
							"    });\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bcbp\": {\r\n        \"id\": {{idBCBP}},\r\n        \"name\": \"{{name}}\",\r\n        \"lastname\": \"{{lastName}}\",\r\n        \"seatLetter\": \"{{seatLetter}}\",\r\n        \"seatNumber\": \"{{seatNumber}}\",\r\n        \"airlineIataCode\": \"{{airlineIataCode}}\",\r\n        \"flightNumber\": \"{{flightNumber}}\",\r\n        \"date\": \"{{date}}\",\r\n        \"stdaJul\": {{stdaJul}},\r\n        \"stda\": {{stda}},\r\n        \"code2D\": \"{{code2Dcode2D}}\",\r\n        \"pocDateTime\": {{pocDateTime}},\r\n        \"runwayId\": \"{{runwayId}}\",\r\n        \"bcbpLastUpdate\": {{bcbpLastUpdate}},\r\n        \"deleted\": false,\r\n        \"expiration\": {{expirationBCBP}}\r\n    },\r\n    \"document\": {\r\n        \"id\": {{idDocument}},\r\n        \"name\": \"{{name}}\",\r\n        \"lastname\": \"{{lastName}}\",\r\n        \"countryISOAlpha3\": \"{{countryISOAlpha3}}\",\r\n        \"docType\": \"{{docType}}\",\r\n        \"docNumber\": \"{{docNumber}}\",\r\n        \"docExpirationDate\": \"0\",\r\n        \"personalNumber\": \"0\",\r\n        \"dateOfBirth\": \"11/02/1996\",\r\n        \"nationalityISOAlpha3\": \"{{nationalityISOAlpha3}}\",\r\n        \"gender\": \"{{gender}}\",\r\n        \"dnmDateTime\": {{dnmDateTime}},\r\n        \"code2D\": \"\",\r\n        \"moveId\": \"{{moveId}}\",\r\n        \"moveType\": \"{{moveType}}\",\r\n        \"dnmLastUpdate\": {{dnmLastUpdate}},\r\n        \"airlineIataCode\": \"{{airlineIataCode}}\",\r\n        \"flightNumber\": \"{{flightNumber}}\",\r\n        \"paxType\": \"P\",\r\n        \"deleted\": false,\r\n        \"expiration\": {{expirationDocument}},\r\n        \"similarList\": []\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/Tracking/MatchDocumentBcbp?username={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"MatchDocumentBcbp"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "MatchDocumentBcbp",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bcbp\": {\r\n        \"id\": 193,\r\n        \"name\": \"CELIA L\",\r\n        \"lastname\": \"BARRIOS CAP3\",\r\n        \"seatLetter\": \"F\",\r\n        \"seatNumber\": \"310\",\r\n        \"airlineIataCode\": \"LA\",\r\n        \"flightNumber\": \"407\",\r\n        \"date\": \"06/02/2023 19:23:00\",\r\n        \"stdaJul\": 37,\r\n        \"stda\": 1675722180,\r\n        \"code2D\": \"M1BARRIOS CAP3/CELIA L        MVDSCLLA 407  37  310F \",\r\n        \"pocDateTime\": 1677118532,\r\n        \"runwayId\": \"POC_1\",\r\n        \"bcbpLastUpdate\": 1677118532,\r\n        \"deleted\": false,\r\n        \"expiration\": 1677204904\r\n    },\r\n    \"document\": {\r\n        \"id\": 133,\r\n        \"name\": \"CELIA LINA\",\r\n        \"lastname\": \"BARRIOS CAP3\",\r\n        \"countryISOAlpha3\": \"URY\",\r\n        \"docType\": \"P\",\r\n        \"docNumber\": \"CI1373488551365\",\r\n        \"docExpirationDate\": \"0\",\r\n        \"personalNumber\": \"0\",\r\n        \"dateOfBirth\": \"30/01/2005\",\r\n        \"nationalityISOAlpha3\": \"URY\",\r\n        \"gender\": \"M\",\r\n        \"dnmDateTime\": 1677118532,\r\n        \"code2D\": \"\",\r\n        \"moveId\": \"020899910000000000000000038224\",\r\n        \"moveType\": \"D\",\r\n        \"dnmLastUpdate\": 1677118532,\r\n        \"airlineIataCode\": \"AF\",\r\n        \"flightNumber\": \"6334\",\r\n        \"paxType\": \"P\",\r\n        \"deleted\": false,\r\n        \"expiration\": 1677204904,\r\n        \"similarList\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{torino.url}}/api/Tracking/MatchDocumentBcbp?username=QA",
							"host": [
								"{{torino.url}}"
							],
							"path": [
								"api",
								"Tracking",
								"MatchDocumentBcbp"
							],
							"query": [
								{
									"key": "username",
									"value": "QA"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "GUID",
							"value": "acb5f66d-e812-4848-b098-28c48bf54e63"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ARR/3.0"
						},
						{
							"key": "Date",
							"value": "Thu, 23 Feb 2023 12:56:03 GMT"
						},
						{
							"key": "Content-Length",
							"value": "110"
						}
					],
					"cookie": [],
					"body": "{\n    \"guid\": \"acb5f66d-e812-4848-b098-28c48bf54e63\",\n    \"code\": 1002,\n    \"message\": \"El Documento y el BCBP ya tienen match\"\n}"
				}
			]
		},
		{
			"name": "AddTrackingToGallery",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"AddTrackingToGallery\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeAddTrackingToGallery.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageAddTrackingToGallery.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{bb}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/Tracking/AddTrackingToGallery?username={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"AddTrackingToGallery"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ProcessMatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"ProcessMatch\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeProcessMatch.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageProcessMatch.toString());\r",
							"});\r",
							"\r",
							"(data.userName == null || data.userName == \"\" || (data.codePocEmbark.toString() == \"0\" && data.codeDocumentEmbark.toString() == \"0\" && data.codeProcessMatch.toString() == \"0\" && jsonData.code == 0)) ? postman.setNextRequest(\"ProcessSimilar\") : postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessMatch?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessMatch"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						},
						{
							"key": "airportISOName",
							"value": "{{airportISOName}}",
							"disabled": true
						},
						{
							"key": "terminalNames",
							"value": "{{terminalNames}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ProcessSimilar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"ProcessSimilar\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeProcessSimilar.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageProcessSimilar.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessSimilar?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessSimilar"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetByDNMDocument",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"GetByDNMDocument\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeGetByDNMDocument.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageGetByDNMDocument.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"dnmLastUpdate>>>>>>>>>>>>>>>>\", pm.environment.get(\"dnmLastUpdate\"));\r",
							"console.log(\"idDocument >>>>>>>>>>>>>>>>>>>\", pm.environment.get(\"idDocument\"));\r",
							"console.log(\"personalNumber >>>>>>>>>>>>>>>>>>>\", pm.environment.get(\"personalNumber\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{idDocument}},\r\n  \"name\": \"{{name}}\",\r\n  \"lastname\": \"{{lastName}}\",\r\n  \"countryISOAlpha3\": \"{{countryISOAlpha3}}\",\r\n  \"docType\": \"{{docType}}\",\r\n  \"docNumber\": \"{{docNumber}}\",\r\n  \"docExpirationDate\": \"0\",\r\n  \"personalNumber\": \"{{personalNumber}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"nationalityISOAlpha3\": \"{{nationalityISOAlpha3}}\",\r\n  \"gender\": \"{{gender}}\",\r\n  \"dnmDateTime\": {{dnmDateTime}},\r\n  \"code2D\": \"{{code2Dcode2D}}\",\r\n  \"runwayId\": \"{{runwayId_dnm}}\",\r\n  \"moveId\": \"{{moveId}}\",\r\n  \"moveType\": \"{{moveType}}\",\r\n  \"dnmLastUpdate\": {{dnmLastUpdate}},\r\n  \"airlineIataCode\": \"{{airlineIataCode}}\",\r\n  \"flightNumber\": \"{{flightNumber}}\",\r\n  \"seatLetter\": \"{{seatLetter}}\",\r\n  \"seatNumber\": \"{{seatNumber}}\",\r\n  \"paxType\": \"{{docType}}\",\r\n  \"deleted\": true,\r\n  \"expiration\": {{expiration}},\r\n  \"photosDNMList\": [\r\n    {\r\n      \"id\": {{idPhotosDNMList}},\r\n      \"documentId\": {{documentId}},\r\n      \"photoTypeId\": {{photoTypeId}},\r\n      \"photoType\": {\r\n        \"id\": {{photoTypeId}},\r\n        \"dnmType\": \"{{dnmType}}\",\r\n        \"extension\": \"JPG\",\r\n        \"dnmSource\": \"{{dnmSource}}\",\r\n        \"webType\": \"{{webType}}\"\r\n      },\r\n      \"image\": \"{{Imagen}}\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/GetByDNMDocument?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"GetByDNMDocument"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllTracking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"GetAllTracking\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeGetAllTracking.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageGetAllTracking.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*if (data.userName == null || data.userName == \"\") {\r",
							"    pm.environment.set(\"airlines\", \"\");\r",
							"    pm.environment.set(\"filters\", \"\");\r",
							"    pm.environment.set(\"page\", \"\");\r",
							"    pm.environment.set(\"pageSize\", \"\");\r",
							"    pm.environment.set(\"sortBy\", \"\");\r",
							"    pm.environment.set(\"orderTypeEnum\", \"\");\r",
							"    pm.environment.set(\"documentId\", \"\");\r",
							"}\r",
							"else { pm.environment.set(\"airlines\", \"All\"); }*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{torino.url}}/api/Tracking/GetAllTracking?username={{userName}}&airlines=All",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"GetAllTracking"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						},
						{
							"key": "airlines",
							"value": "All"
						},
						{
							"key": "filters",
							"value": "{{filters}}",
							"disabled": true
						},
						{
							"key": "page",
							"value": "{{page}}",
							"disabled": true
						},
						{
							"key": "pageSize",
							"value": "{{pageSize}}",
							"disabled": true
						},
						{
							"key": "sortBy",
							"value": "{{sortBy}}",
							"disabled": true
						},
						{
							"key": "orderTypeEnum",
							"value": "{{orderTypeEnum}}",
							"disabled": true
						},
						{
							"key": "documentId",
							"value": "{{documentId}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OnlyIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"OnlyIDs\", jsonData);\r",
							"\r",
							"const pos = jsonData.data.length - 1;\r",
							"pm.environment.set(\"paX_ID\", jsonData.data[pos].paX_ID);\r",
							"\r",
							"console.log(\"paX_ID\", pm.environment.get(\"paX_ID\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{torino.url}}/api/Passenger/OnlyIDs?updatedSince=0",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Passenger",
						"OnlyIDs"
					],
					"query": [
						{
							"key": "updatedSince",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Passenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"/*const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"Passenger \", jsonData);*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const id = pm.environment.get(\"ids\");\r",
							"console.log(\"id\",id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {{paX_ID}}\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/Passenger",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Passenger"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetModifiedTracking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"GetModifiedTracking\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeGetModifiedTracking.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageGetModifiedTracking.toString());\r",
							"});\r",
							"if (jsonData.code == 0) {\r",
							"\r",
							"    for (var i = 0; i < jsonData.data.length; i++) {\r",
							"        if (jsonData.data[i].paxMatch != null && jsonData.data[i].paxMatch.id == pm.environment.get(\"paxMatchId\") && jsonData.data[i].paxMatch.bcbpId == pm.environment.get(\"idBCBP\") && jsonData.data[i].paxMatch.documentId == pm.environment.get(\"idDocument\")) {\r",
							"            pax = jsonData.data[i];\r",
							"            /**check the status*/\r",
							"            pm.test(\"check the status Added\", () => {\r",
							"                pm.expect(jsonData.data[i].paxMatch.submissionToGalleryType).to.eq(\"Added\");\r",
							"            });\r",
							"        }\r",
							"    } pm.environment.set(\"pax\", JSON.stringify(pax));\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (data.userName == null || data.userName == \"\") {\r",
							"    //pm.environment.set(\"airlines\", \"\");\r",
							"}\r",
							"else { pm.environment.set(\"airlines\", \"All\"); }\r",
							"\r",
							"pm.environment.set(\"dateTimeLastConsulting\", \"\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{torino.url}}/api/Tracking/GetModifiedTracking?username={{userName}}&airlines=All&dateTimeLastConsulting={{dateTimeLastConsulting}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"GetModifiedTracking"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						},
						{
							"key": "airlines",
							"value": "All"
						},
						{
							"key": "dateTimeLastConsulting",
							"value": "{{dateTimeLastConsulting}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSimilarNamesAsync",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"GetSimilarNamesAsync\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeGetSimilarNamesAsync.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageGetSimilarNamesAsync.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*if (data.userName == null || data.userName == \"\") {\r",
							"    pm.environment.set(\"airlines\", \"\");\r",
							"}\r",
							"else { pm.environment.set(\"airlines\", \"All\"); }*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{torino.url}}/api/Tracking/GetSimilarNamesAsync?username={{userName}}&airlines=All",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"GetSimilarNamesAsync"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						},
						{
							"key": "airlines",
							"value": "All"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RemoveTrackingFromGallery",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"RemoveTrackingFromGallery\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeRemoveTrackingFromGallery.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageRemoveTrackingFromGallery.toString());\r",
							"});\r",
							"/**check the status*/\r",
							"pm.test(\"check the status ReadyToRemove\", () => {\r",
							"    pm.expect(jsonData.data.paxMatch.submissionToGalleryType).to.eq(\"ReadyToRemove\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{pax}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/Tracking/RemoveTrackingFromGallery?username={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"RemoveTrackingFromGallery"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnmatchDocumentBcbp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"UnmatchDocumentBcbp\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeUnmatchDocumentBcbp.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageUnmatchDocumentBcbp.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{pax}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/Tracking/UnmatchDocumentBcbp?username={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"UnmatchDocumentBcbp"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetNumberPassProcess",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"GetNumberPassProcess\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeGetNumberPassProcess.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageGetNumberPassProcess.toString());\r",
							"});\r",
							"postman.setNextRequest(null)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/Tracking/GetNumberPassProcess?username={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"Tracking",
						"GetNumberPassProcess"
					],
					"query": [
						{
							"key": "username",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**I assign the values to the parameters of the url from the json file*/",
					"/*const keys = Object.keys(data);",
					"keys.map((key) => {",
					"    pm.environment.set(key, data[key]);",
					"})",
					"pm.environment.unset(\"_services\");",
					"pm.environment.unset(\"_comment\");",
					"pm.environment.unset(\"index\");*/",
					"",
					"pm.environment.set(\"moveId\", data.moveId);",
					"pm.environment.set(\"docNumber\", data.docNumber);",
					"pm.environment.set(\"gender\", data.gender);",
					"pm.environment.set(\"countryISOAlpha3\", data.countryISOAlpha3);",
					"pm.environment.set(\"nationalityISOAlpha3\", data.nationalityISOAlpha3);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}