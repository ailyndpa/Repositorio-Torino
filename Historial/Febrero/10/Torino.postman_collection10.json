{
	"info": {
		"_postman_id": "cd8741b4-25bc-42bc-b575-c4a3ff60d7aa",
		"name": "Torino",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24313612"
	},
	"item": [
		{
			"name": "ProcessPocEmbarkPassenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codePocEmbark.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messagePocEmbark.toString());\r",
							"});\r",
							"\r",
							"if (data.codePocEmbark == 0) {\r",
							"    let unixTimestamp = new Date(data.pocDateTime * 1000); //multiply 1000 converts Unix  to JavaScript \r",
							"    let getHours = String(unixTimestamp.getHours()).padStart(2, '0');\r",
							"    let getMin = String(unixTimestamp.getMinutes()).padStart(2, '0');\r",
							"    let getSec = String(unixTimestamp.getSeconds()).padStart(2, '0');\r",
							"    let getday = String(unixTimestamp.getDate()).padStart(2, '0');\r",
							"    let getMonth = String(unixTimestamp.getMonth() + 1).padStart(2, '0');\r",
							"\r",
							"    let code2D = data.code2D;\r",
							"    let name = code2D.split('/')[1].split(' ')[0];\r",
							"    let lasName = code2D.split('1')[1].split('/')[0].split(' ')[0];\r",
							"    let seatNumber = code2D.split('8741 1')[1].split('A')[0].split(' ')[3];\r",
							"    let satLetter = code2D.split('8741 1')[1].split(`${seatNumber}`)[1].split(' ')[0];\r",
							"    let airlineIataCode = code2D.split('MVDPTY')[1].split(' ')[0];\r",
							"    let flightNumber = code2D.split('MVDPTY')[1].split(' ')[1];\r",
							"    let date = (getday + \"/\" + getMonth + \"/\" + unixTimestamp.getFullYear() + \" \" + getHours + \":\" + getMin + \":\" + getSec);\r",
							"    pm.environment.set(\"date\", date);\r",
							"    let stdaJul = code2D.split('8741 ')[1].split(' ')[0];\r",
							"\r",
							"    /**Verifying that the data sent in the body of the request are the same as those returned in the body of the response.*/\r",
							"    pm.test(\"validate that the response message is the one I am expecting in the js for the current iteration\", () => {\r",
							"\r",
							"        /**If the passenger is inserted verify the data in insertBcbp*/\r",
							"        if (jsonData.data.insertBcbp.id != 0) {\r",
							"            pass = jsonData.data.insertBcbp;\r",
							"        } else {\r",
							"            pass = jsonData.data.updateBcbp;\r",
							"        }\r",
							"        pm.expect(pass.name).to.eq(name);\r",
							"        pm.expect(pass.lastname).to.include(lasName);\r",
							"        pm.expect(pass.seatLetter).to.eq(satLetter);\r",
							"        pm.expect(pass.seatNumber).to.eq(seatNumber);\r",
							"        pm.expect(pass.airlineIataCode).to.eq(airlineIataCode);\r",
							"        pm.expect(pass.flightNumber).to.eq(flightNumber);\r",
							"        pm.expect(pass.date).to.eq(date);\r",
							"        pm.expect(pass.stdaJul).to.eq(stdaJul);\r",
							"        pm.expect(pass.stda.toString()).to.eq(data.stda.toString());\r",
							"        pm.expect(pass.code2D).to.eq(code2D);\r",
							"        pm.expect(pass.pocDateTime.toString()).to.eq(data.pocDateTime.toString());\r",
							"        pm.expect(pass.runwayId).to.eq(data.runwayId.toLowerCase());\r",
							"        pm.expect(pass.bcbpLastUpdate).to.eq(data.bcbpLastUpdate.toString());\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"pocBcbp\": {\r\n        \"stda\": {{stda}},\r\n        \"code2D\": \"{{code2D}}\",\r\n        \"pocDateTime\": {{pocDateTime}},\r\n        \"runwayId\": \"{{runwayId}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessPocEmbarkPassenger?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessPocEmbarkPassenger"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "ProcessPocEmbarkPassenger",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pocBcbp\": {\r\n    \"name\": \"DIANA I\",\r\n    \"lastname\": \"DOMINGUEZ MA\",\r\n    \"seatLetter\": \"S\",\r\n    \"seatNumber\": \"301\",\r\n    \"airlineIataCode\": \"AF\",\r\n    \"flightNumber\": \"8741\",\r\n    \"date\": \"1657737131\",\r\n    \"stdaJul\": 194,\r\n    \"stda\": 1657735800,\r\n    \"code2D\": \"M1LOPEZ BARRAG/VALERIA        MVDGRUAF 8741 194 307S        \",\r\n    \"pocDateTime\": 1657737128,\r\n    \"runwayId\": \"POC_1\",\r\n    \"bcbpLastUpdate\": 1657737128\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessPocEmbarkPassenger?userName=QA",
							"host": [
								"{{torino.url}}"
							],
							"path": [
								"api",
								"MatchAndSimilarNames",
								"ProcessPocEmbarkPassenger"
							],
							"query": [
								{
									"key": "userName",
									"value": "QA"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "GUID",
							"value": "8ea39ddf-a744-47b8-a7a6-844e67d8d900"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ARR/3.0"
						},
						{
							"key": "Date",
							"value": "Wed, 08 Feb 2023 13:31:40 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1078"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"insertBcbp\": {\n            \"id\": 0,\n            \"name\": null,\n            \"lastname\": null,\n            \"seatLetter\": null,\n            \"seatNumber\": null,\n            \"airlineIataCode\": null,\n            \"flightNumber\": null,\n            \"date\": null,\n            \"stdaJul\": 0,\n            \"stda\": 0,\n            \"code2D\": null,\n            \"pocDateTime\": 0,\n            \"runwayId\": null,\n            \"bcbpLastUpdate\": 0,\n            \"vipCode\": null,\n            \"deleted\": false,\n            \"expiration\": 0\n        },\n        \"updateBcbp\": {\n            \"id\": 30379,\n            \"name\": \"VALERIA\",\n            \"lastname\": \"LOPEZ BARRAG\",\n            \"seatLetter\": \"S\",\n            \"seatNumber\": \"307\",\n            \"airlineIataCode\": \"AF\",\n            \"flightNumber\": \"8741\",\n            \"date\": \"13/07/2022 15:10:00\",\n            \"stdaJul\": 194,\n            \"stda\": 1657735800,\n            \"code2D\": \"M1LOPEZ BARRAG/VALERIA        MVDGRUAF 8741 194 307S        \",\n            \"pocDateTime\": 1657737128,\n            \"runwayId\": \"POC_1\",\n            \"bcbpLastUpdate\": 1657737128,\n            \"vipCode\": null,\n            \"deleted\": false,\n            \"expiration\": 1675905697\n        },\n        \"existAndNotUpdateBcbp\": {\n            \"id\": 0,\n            \"name\": null,\n            \"lastname\": null,\n            \"seatLetter\": null,\n            \"seatNumber\": null,\n            \"airlineIataCode\": null,\n            \"flightNumber\": null,\n            \"date\": null,\n            \"stdaJul\": 0,\n            \"stda\": 0,\n            \"code2D\": null,\n            \"pocDateTime\": 0,\n            \"runwayId\": null,\n            \"bcbpLastUpdate\": 0,\n            \"vipCode\": null,\n            \"deleted\": false,\n            \"expiration\": 0\n        }\n    },\n    \"guid\": \"8ea39ddf-a744-47b8-a7a6-844e67d8d900\",\n    \"code\": 0,\n    \"message\": \"Transacción ejecutada con éxito\"\n}"
				}
			]
		},
		{
			"name": "ProcessDocumentEmbarkPassenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeDocumentEmbark.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageDocumentEmbark.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"data\": {\r\n    \"moveId\": \"string\",\r\n    \"flightCode\": \"string\",\r\n    \"airlineIataCode\": \"string\",\r\n    \"flightNumber\": \"string\",\r\n    \"dnmDateTime\": 0,\r\n    \"moveType\": \"string\",\r\n    \"name\": \"string\",\r\n    \"lastname\": \"string\",\r\n    \"dateOfBirth\": \"string\",\r\n    \"code2D\": \"string\",\r\n    \"seatCode\": \"string\",\r\n    \"docNumber\": \"string\",\r\n    \"personalNumber\": \"string\",\r\n    \"photosDnms\": [\r\n      {\r\n        \"image\": \"string\",\r\n        \"extension\": \"string\",\r\n        \"type\": \"string\",\r\n        \"source\": \"string\",\r\n        \"light\": \"string\",\r\n        \"side\": \"string\",\r\n        \"finger\": \"string\",\r\n        \"detail\": \"string\"\r\n      }\r\n    ],\r\n    \"docType\": \"string\",\r\n    \"countryISOAlpha3\": \"string\",\r\n    \"paxType\": \"string\",\r\n    \"gender\": \"string\",\r\n    \"nationalityISOAlpha3\": \"string\",\r\n    \"docExpirationDate\": \"string\"\r\n  },\r\n  \"guid\": \"string\",\r\n  \"code\": 0,\r\n  \"message\": \"string\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessPocEmbarkPassenger?userName={{userName}}",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessPocEmbarkPassenger"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ProcessSyncEmbarkPassenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**I store the answer in JsonDta*/\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"jsonData\", jsonData)\r",
							"\r",
							"/**valid if the status code is 200*/\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/**validate that the response code is the one I am waiting for in the js for the current iteration*/\r",
							"pm.test(\"Checking response code\", () => {\r",
							"    pm.expect(jsonData.code.toString()).to.eq(data.codeDocumentEmbark.toString());\r",
							"});\r",
							"\r",
							"/**validate that the response message is the one I am expecting in the js for the current iteration*/\r",
							"pm.test(\"Checking response message\", () => {\r",
							"    pm.expect(jsonData.message.toString()).to.eq(data.messageDocumentEmbark.toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{torino.token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{torino.url}}/api/MatchAndSimilarNames/ProcessSyncEmbarkPassenger?userName={{userName}}&airportISOName=&terminalNames=",
					"host": [
						"{{torino.url}}"
					],
					"path": [
						"api",
						"MatchAndSimilarNames",
						"ProcessSyncEmbarkPassenger"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}"
						},
						{
							"key": "airportISOName",
							"value": ""
						},
						{
							"key": "terminalNames",
							"value": ""
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**I assign the values to the parameters of the url from the json file*/",
					"const keys = Object.keys(data);",
					"keys.map((key) => {",
					"    pm.environment.set(key, data[key]);",
					"})",
					"pm.environment.unset(\"_services\");",
					"pm.environment.unset(\"_comment\");",
					"pm.environment.unset(\"index\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}